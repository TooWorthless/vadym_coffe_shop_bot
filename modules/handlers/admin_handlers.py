
from telebot import TeleBot
from config.settings import ADMIN_IDS
from modules.handlers.base_handler import BaseHandler
from core.exceptions import AdminAccessError
from services.catalog_service import CatalogService
from services.order_service import OrderService
from utils.validators import validate_product_data

class AdminHandlers(BaseHandler):
    def register_handlers(self):
        @self.bot.message_handler(commands=['admin'])
        def admin(message):
            try:
                self._check_admin(message.from_user.id)
                self.bot.reply_to(message, "üîß –í—ñ—Ç–∞—î–º–æ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ, –±–∞—Ä–∏—Å—Ç–∞!", reply_markup=self.keyboard.admin_menu())
            except AdminAccessError as e:
                self.bot.reply_to(message, str(e))

        @self.bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞–≤—É")
        def add_item(message):
            try:
                self._check_admin(message.from_user.id)
                msg = self.bot.reply_to(message, "‚ûï –î–æ–¥–∞–π –Ω–æ–≤—É –∫–∞–≤—É: –∫–ª—é—á, –Ω–∞–∑–≤–∞, –æ–ø–∏—Å, —Ü—ñ–Ω–∞ (—á–µ—Ä–µ–∑ –∫–æ–º—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: latte, –õ–∞—Ç–µ, –ù—ñ–∂–Ω–∞ –∫–∞–≤–∞, 45.0)")
                self.bot.register_next_step_handler(msg, self.process_add_item)
            except AdminAccessError as e:
                self.bot.reply_to(message, str(e))

        @self.bot.message_handler(func=lambda message: message.text == "‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞–≤—É")
        def remove_item(message):
            try:
                self._check_admin(message.from_user.id)
                msg = self.bot.reply_to(message, "‚ûñ –í–∫–∞–∂–∏ –∫–ª—é—á –∫–∞–≤–∏, —è–∫—É —Ö–æ—á–µ—à –ø—Ä–∏–±—Ä–∞—Ç–∏:")
                self.bot.register_next_step_handler(msg, self.process_remove_item)
            except AdminAccessError as e:
                self.bot.reply_to(message, str(e))

        @self.bot.message_handler(func=lambda message: message.text == "üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è")
        def orders(message):
            try:
                self._check_admin(message.from_user.id)
                order_service = OrderService(self.db)
                orders_list = order_service.get_all_orders()
                response = "\n".join([f"üë§ {o['user_id']}: {o['product_name']} ‚Äî {o['price']} –≥—Ä–Ω ({o['status']})" for o in orders_list])
                self.bot.reply_to(message, f"üì¶ –û—Å—å —É—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n{response}" if response else "üì≠ –ó–∞–º–æ–≤–ª–µ–Ω—å –ø–æ–∫–∏ –Ω–µ–º–∞—î.")
            except AdminAccessError as e:
                self.bot.reply_to(message, str(e))
            except Exception as e:
                self.bot.reply_to(message, f"‚òπÔ∏è –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫: {str(e)}. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")

    def _check_admin(self, user_id: int):
        if user_id not in ADMIN_IDS:
            raise AdminAccessError("üîí –¢–∏ –Ω–µ –±–∞—Ä–∏—Å—Ç–∞! –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")

    def process_add_item(self, message):
        try:
            key, name, description, price = validate_product_data(message.text)
            catalog_service = CatalogService(self.db)
            catalog_service.add_product(key, name, description, price)
            self.bot.reply_to(message, f"‚úÖ {name} –¥–æ–¥–∞–Ω–∏–π –¥–æ –º–µ–Ω—é! –ß–∞—Å –∑–∞–≤–∞—Ä—é–≤–∞—Ç–∏!")
        except Exception as e:
            self.bot.reply_to(message, f"‚òπÔ∏è –ü–æ–º–∏–ª–∫–∞: {str(e)}. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")

    def process_remove_item(self, message):
        try:
            key = message.text.strip()
            catalog_service = CatalogService(self.db)
            catalog_service.remove_product(key)
            self.bot.reply_to(message, f"üóëÔ∏è –ö–∞–≤—É –∑ –∫–ª—é—á–µ–º {key} –ø—Ä–∏–±—Ä–∞–Ω–æ –∑ –º–µ–Ω—é!")
        except Exception as e:
            self.bot.reply_to(message, f"‚òπÔ∏è –ü–æ–º–∏–ª–∫–∞: {str(e)}. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!")